pad {$  | $\t | $\n | $# ($\n! & @)*}:[];
pad$* pad*;
parop pad | $( | $) | $[ | $] | ${ | $} | $< | $>;
funop regop | $" | $' | $` | $;;
word {($$ @).1 | funop! & @}+:".";
txt {$" (pad$* [$"! & fun]).1* pad$* $" | $' (pad$* [$'! & fun]).1* pad$* $' | $` (pad$* [$`! & fun]).1* pad$* $`}:[str .1] | word:[txt .];
out {$. txt}.1+:[fout .] | $.:[fout];
par {$( pad$* txt (pad$* [$)! & fun]).1* pad$* $)}:[.2.1 .3];
ary {$[ (pad$* [$]! & fun]).1* pad$* $]}:[ary .1];
fpad {${ (pad$* [$}! & fun]).1* pad$* $}}:[pad .1];
fun txt | out | fpad | par | ary;
regop parop | $. | $* | $+ | $- | $! | $| | $& | $@ | $: | $;;
match {($$ @).1 | regop! & @}+:[mch "."];
char $@:[char];
range {@ pad$* $- pad$* @}:[rng .0 .4];
block {$( pad$* or pad$* $) | $[ pad$* or pad$* $] | ${ pad$* or pad$* $}}.2;
post {(char | match | block | range) (pad$* [$*:[rep0] | $+:[rep1] | $!:[not] | {$. pad$* word}:[out {txt .2}] | {$: pad$* fun}:[fun {.2}]]).1*}:(stk . .0 .1);
list {post (pad$* post).1+}:[lst {.0} .1] | post;
and {list (pad$* $& pad$* list).3+}:[and {.0} .1] | list;
or {and (pad$* $| pad$* and).3+}:[or {.0} .1] | and;
start {(pad$* word pad$* or pad$* $;):[key {txt .1} {.3}]* pad$*}:[map .0];
